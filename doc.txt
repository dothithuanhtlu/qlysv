-domain: @getter, @setter với id tự tăng thì k cho phép truy cập setter id(done)
- interface k được để default (done)
- api tạo 1 object k để "s"//(will do or no)
-hard code và k trả về data cho create, update (done) với các tên procedure cần const 
-manytoone,... thì phải thêm kiểu Lazy hay ...(done)
--controller không throws exception (done)
--swagger cần cmt các status code có thể xảy ra (done)
--connect db: pass,... phai lay bien moi truong



--login lay token sau do phan quyen
b1: enum: user(role) pemissions(ten, httpmethod, endpoint, co the description) xu ly trước khi vào api(controller) , user_pemission.  
b2: database(role, pemission, role_permissions)

---1. them password vao student, them role: (done)
---2. sua update, create: hashpassword: (done) 
--connect db: pass,... phai lay bien moi truong
---jwt
---enum 
---phanquyen




package com.restful.quanlysinhvien.services.service_impl;

import java.util.Collections;

import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Component;

import com.restful.quanlysinhvien.domain.dto.StudentDTO;

@Component("userDetailsService")
public class UserDetailsCustom implements UserDetailsService {
    private final StudentService studentService;

    public UserDetailsCustom(StudentService studentService) {
        this.studentService = studentService;
    }

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        StudentDTO student = this.studentService.getStuByStuCode(username);
        if (student == null) {
            throw new UsernameNotFoundException("Bad credentials");
        }
        return new org.springframework.security.core.userdetails.User(
                student.getStudentCode(),
                student.getPassword(),
                Collections.singletonList(new SimpleGrantedAuthority("ROLE_USER")));
    }

}


// @Bean
    // public AuthenticationManager authenticationManager(HttpSecurity http,
    // PasswordEncoder passwordEncoder,
    // UserDetailsService userDetailsService) throws Exception {
    // AuthenticationManagerBuilder authenticationManagerBuilder = http
    // .getSharedObject(AuthenticationManagerBuilder.class);
    // authenticationManagerBuilder
    // .userDetailsService(userDetailsService)
    // .passwordEncoder(passwordEncoder);
    // return authenticationManagerBuilder.build();
    // }